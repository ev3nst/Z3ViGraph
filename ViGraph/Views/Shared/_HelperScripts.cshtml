@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor 
<script>
const datatableDict = {
    emptyTable: "{{ __('general.datatable.emptyTable') }}",
    zeroRecords: "{{ __('general.datatable.zeroRecords') }}",
    loadingRecords: "{{ __('general.datatable.loadingRecords') }}",
    processing: "{{ __('general.datatable.processing') }}",
    info: "{{ __('general.datatable.info') }}"
};

toastr.options = {
    'closeButton': false,
    'debug': false,
    'newestOnTop': true,
    'progressBar': false,
    'positionClass': 'toast-top-right',
    'preventDuplicates': false,
    'onclick': null,
    'showDuration': '200',
    'hideDuration': '1000',
    'timeOut': '10000',
    'extendedTimeOut': '1000',
    'showEasing': 'swing',
    'hideEasing': 'linear',
    'showMethod': 'fadeIn',
    'hideMethod': 'fadeOut'
};

!function(a){a.fn.datepicker.dates.tr={days:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],daysShort:["Pz","Pzt","Sal","Çrş","Prş","Cu","Cts"],daysMin:["Pz","Pzt","Sa","Çr","Pr","Cu","Ct"],months:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],monthsShort:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],today:"Bugün",clear:"Temizle",weekStart:1,format:"dd.mm.yyyy"}}(jQuery);
$('.init-datepicker').datepicker({
  todayHighlight: true,
  clearBtn: true,
  autoclose:true,
  language: 'tr',
  format: 'dd/mm/yyyy',
});

function delay(callback, ms) {
  var timer = 0;
  return function() {
    var context = this, args = arguments;
    clearTimeout(timer);
    timer = setTimeout(function () {
      callback.apply(context, args);
    }, ms || 0);
  };
}

function nullToEmpty(str) {
  if(str === null) {
    return '';
  }
  return str;
}

function convertEmptyText(string) {
	string = nullToEmpty(string);
  return string;
	if(string.length === 0) {
		extClass = 'italic';
    string = '<em>(BOŞ)</em>';
    return string;
  }
  return string;
}

// Delete button
function deleteButton(onDeleteSuccess = () => null) {
  $('.delete-button').each(function() {
    $(this).unbind('click');
    $(this).click(function() {
      $('.resource-detail').modal('hide');
      
      $(this).attr('delete-activated', 'true');

      $('#delete-body').html(
        '<strong class="text-danger">' + $(this).attr('data-title') + " - {{ __('general.will_be_removed') }}! </strong>"
      )
    })
  })

  $('#delete-accepted').unbind('click');
  $('#delete-accepted').click(function() {
    const deleteLink = $('[delete-activated="true"]').data('delete-link');
    $('[delete-activated="true"]').removeAttr('delete-activated')
    if(deleteLink === undefined) {
        toastr.error("{{ __('general.unexpected_error') }}")
    }
    $.ajax({
        type: "DELETE",
        url: deleteLink,
        data: {_method: 'delete', _token : $("meta[name=csrf-token]").attr('content')},
        success: function (data) {
          toastr.success("{{ __('general.delete_success') }}", data)
          onDeleteSuccess();
          $('#deleteConfirmation').modal('hide')
        },
        error: function (data) {
          $('#deleteConfirmation').modal('hide')
          if(typeof data['responseJSON']['message'] !== 'undefined') {
            toastr.error(data['responseJSON']['message'])
          } else {
            toastr.error("{{ __('general.unexpected_error') }}")
          }
        }
    });
  })
}

function deleteButtonReason(onDeleteSuccess = () => null) {
  $('.delete-button').each(function() {
    $(this).unbind('click');
    $(this).click(function() {
      $('.resource-detail').modal('hide');
      
      $(this).attr('delete-activated', 'true');

      $('#delete-body-desc').html(
        '<strong class="text-danger">' + $(this).attr('data-title') + " - {{ __('general.will_be_removed') }}! </strong>"
      )
    })
  })

  $('#delete-accepted').unbind('click');
  $('#delete-accepted').click(function() {
    const deleteLink = $('[delete-activated="true"]').data('delete-link');
    if(deleteLink === undefined) {
        toastr.error("{{ __('general.unexpected_error') }}")
    }

    const deleteReason = $('#delete-reason').val();
    if(deleteReason === undefined || String(deleteReason).length == 0) {
        toastr.error("{{ __('general.delete_reason_missing') }}");
        return;
    }

    $('[delete-activated="true"]').removeAttr('delete-activated')
    $.ajax({
        type: "DELETE",
        url: deleteLink,
        data: {_method: 'delete', _token : $("meta[name=csrf-token]").attr('content'), deleteReason },
        success: function (data) {
          toastr.success("{{ __('general.delete_success') }}", data)
          onDeleteSuccess();
          $('#deleteReasonConfirmation').modal('hide');
          $('#delete-reason').val('');
        },
        error: function (data) {
          $('#deleteReasonConfirmation').modal('hide')
          if(typeof data['responseJSON']['message'] !== 'undefined') {
            toastr.error(data['responseJSON']['message'])
          } else {
            toastr.error("{{ __('general.unexpected_error') }}")
          }
        }
    });
  })
}

function restoreButton(model, onRestoreSuccess = () => null) {
  $('#kt_datatable_' + model + '_trash .restore-button').each(function() {
    $(this).unbind('click');
    $(this).click(function(e){
      let restoreLink = $(this).data('restore-link');
      if(
        restoreLink === '' ||
        restoreLink === null
      ) {
        return;
      }
      $.ajax({
          type: "GET",
          url: restoreLink,
          data: { _token : $("meta[name=csrf-token]").attr('content') },
          success: function (data) {
            toastr.success("{{ __('general.restore_success') }}", data)
            onRestoreSuccess()
          },
          error: function (data) {
            if(typeof data['responseJSON']['message'] !== 'undefined') {
              toastr.error(data['responseJSON']['message'])
            } else {
              toastr.error("{{ __('general.unexpected_error') }}")
            }
          }
      });
    })
  })
}

function permaDeleteButton(model, onPermaDeleteSuccess = () => null) {
  $('#kt_datatable_' + model + '_trash .perma-delete-button').each(function() {
    $(this).unbind('click');
    $(this).click(function(e){
      $(this).attr('perma-delete-activated', 'true');
      $('#perma-delete-body').html(
        '<strong class="text-danger">' + $(this).attr('data-title') + ' - Adlı içerik geri dönüşümü olmaksızın silinecektir! </strong>'
      )
    })
  })

  $('#perma-delete-accepted').unbind('click');
  $('#perma-delete-accepted').click(function() {
    const deleteLink = $('[perma-delete-activated="true"]').data('delete-link');
    $('[perma-delete-activated="true"]').removeAttr('perma-delete-activated')
    if(deleteLink === undefined) {
      return;
    }
    $.ajax({
        type: "DELETE",
        url: deleteLink,
        data: {_method: 'delete', _token : $("meta[name=csrf-token]").attr('content')},
        success: function (data) {
          toastr.success("{{ __('general.perma_delete_success') }}", data)
          onPermaDeleteSuccess();
          $('#permaDeleteConfirmation').modal('hide')
        },
        error: function (data) {
            $('#permaDeleteConfirmation').modal('hide')
            if(typeof data['responseJSON']['message'] !== 'undefined') {
              toastr.error(data['responseJSON']['message'])
            } else {
              toastr.error("{{ __('general.unexpected_error') }}")
            }
        }
    });
  })
}

function toggleActionsDatatable(table) {
  $('.toggle-actions').click(function() {
    var columns = table.settings().init().columns;
    var column = table.column( columns.length - 1 );
    let isVisible = column.visible();
    column.visible( !isVisible );
    table.columns.adjust().draw();
  })
}

function addExportButtons(tableId, appendTo, config = { paging: false, pageLength: 1000000, responsive: false, autoWidth: true, exportTitle: '' }) {
    $.fn.dataTable.ext.errMode = 'none';
    let exportTitle = '';
    if(config.exportTitle == undefined || config.exportTitle.length == 0) {
        exportTitle = $(appendTo).find('.card-label').text().trim() + ' - ' + $('input[name="start_date"]').val() + ' - ' + $('input[name="end_date"]').val();
    } else {
        exportTitle = config.exportTitle;
    }
    const fileName = exportTitle.replaceAll('/', '-');
    var $dt = $(tableId).DataTable({
        //dom: 'Bfrtip',
        responsive: config.responsive,
        serverSide: false,
        paging: config.paging,
        pageLength: config.pageLength,
        scrollX: false,
        scrollY: false,
        searching: false,
        autoWidth: config.autoWidth,
        ordering: false,
        info: false,
        select: false,
        processing: false,
        columnDef: [{type:'string', targets: '_all'}],
    });
    // Configure Export Buttons
    new $.fn.dataTable.Buttons( $dt, {
        buttons: [
            {
                extend: 'print',
                className: 'dt-print-button',
                exportOptions: {
                    columns: ':visible',
                    stripHtml: false
                },
                text: 'Print',
                title: exportTitle,
                filename: fileName,
                customize: function ( win ) {
                    $(win.document.body).find('h1')
                        .text(exportTitle)
                        .css({
                            'font-size': '16px',
                            'margin-left': '6px',
                            'margin-bottom': '20px',
                        });
                    $(win.document.body).find('tr').each(function() {
                        if($(this).find('td').eq(0).text().startsWith("{{ __('general.total') }}")) {
                            $(this).find('td').each(function() {
                                $(this).css('font-weight', 'bolder');
                            })
                        }
                    });
                }
            },
            {
                extend: 'excelHtml5',
                className: 'dt-excel-button',
                title: exportTitle,
                exportOptions: {
                    columns: ':visible',
                },
                customize: function ( xlsx ) {
                    var sheet = xlsx.xl.worksheets['sheet1.xml'];
                    $('row c', sheet).attr('s', '64');
                },
                filename: fileName,
                title: function () {
                    return 'Export';
                },
            },
            {
                extend: 'csvHtml5',
                className: 'dt-csv-button',
                title: exportTitle,
                filename: fileName,
                exportOptions: {
                    columns: ':visible',
                },
                customize: function (csv) {
                    return exportTitle+"\n\n"+  csv;
                },
            },
            {
                extend: 'pdfHtml5',
                className: 'dt-pdf-button',
                title: exportTitle,
                filename: fileName,
                exportOptions: {
                    columns: ':visible',
                },
            },
        ],
    } );
    
    // Add the Export buttons to the toolbox
    $dt.buttons( 0, null ).container().appendTo(appendTo);
    $('.dataTables_wrapper.dt-bootstrap4.no-footer').each(function() {
        $(this).removeClass('dataTables_wrapper')
        $(this).removeClass('dt-bootstrap4')
        $(this).removeClass('no-footer')
    });

    return $dt;
}

$(document).ready(function() {
    // Masks
    $('.form-control.date').mask('99/99/9999', {
        placeholder: "dd/mm/yyyy"
    });

    $('.form-control.time').mask('00:00', {
        placeholder: "00:00"
    });
    
    $('.form-control.time-s').mask('00:00:00', {
        placeholder: "00:00:00"
    });

    $('input.numeric').inputmask({
        alias: 'numeric', 
        allowMinus: false,  
    });
    $('.ip_address').mask('0ZZ.0ZZ.0ZZ.0ZZ', {
            translation:{
                'Z': {
                    pattern: /[0-9]/,
                    optional: true
                }
            }
        }
    );
    
    $('.typeahead input').each(function() {
        // Suggestion Engine
        var engine = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            prefetch: {
                url: $(this).data('prefetch-url'),
                ttl: 86400000, // 1 day cache
                cache: true
            },
        });

        $(this).typeahead({
            hint: true,
            highlight: true,
            minLength: 1,
        }, {
            name: $(this).data('attribute') + '-title',
            source: engine,
        });
    });

    // Custom Export Datatable Buttons
    $('.datatable-custom-export-buttons a').on('click', function() {
        $('.dt-' + $(this).data('target') + '-button').click();
    });

    $('.save-button').click(function() {
        $('#' + $(this).data('form')).submit();
    });

    $(".init-select2").select2({ allowClear: true });

    /*
    timePicker: true,
    timePicker24Hour: true,
    timePickerSeconds: false,
    */
    $('.init-datepicker-custom').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        autoUpdateInput: true,
        showCustomRangeLabel: false,
        maxYear: Number("{{ date('Y') + 1 }}"),
        locale: {
            format: 'DD/MM/YYYY',
            cancelLabel: "{{ __('general.cancel') }}",
            applyLabel: "{{ __('general.save') }}",
            daysOfWeek: [
                "{{ __('general.days_short.su') }}",
                "{{ __('general.days_short.mo') }}",
                "{{ __('general.days_short.tu') }}",
                "{{ __('general.days_short.we') }}",
                "{{ __('general.days_short.th') }}",
                "{{ __('general.days_short.fr') }}",
                "{{ __('general.days_short.sa') }}",
            ],
            monthNames: [
                "{{ __('general.months.january') }}",
                "{{ __('general.months.february') }}",
                "{{ __('general.months.march') }}",
                "{{ __('general.months.april') }}",
                "{{ __('general.months.may') }}",
                "{{ __('general.months.june') }}",
                "{{ __('general.months.july') }}",
                "{{ __('general.months.august') }}",
                "{{ __('general.months.september') }}",
                "{{ __('general.months.october') }}",
                "{{ __('general.months.november') }}",
                "{{ __('general.months.december') }}",
            ],
        },
        ranges: {
            "{{ __('general.dates.today') }}": [moment()],
            "{{ __('general.dates.yestarday') }}": [moment().subtract(1, 'days')],
            "{{ __('general.dates.last_7_days') }}": [moment().subtract(7, 'days')],
            "{{ __('general.dates.last_30_days') }}": [moment().subtract(30, 'days')],
            "{{ __('general.dates.this_month_start') }}": [moment().subtract(1, 'month').startOf('month')],
            "{{ __('general.dates.this_month_end') }}": [moment().subtract(1, 'month').endOf('month')]
        },
    })
});
</script>


@if (HttpContextAccessor.HttpContext.Session.Get("StatusMessage") != null) {
<script>
    toastr.{{ Session::get('status') }}("{{ Session::get('message') }}");
</script>
}